{
  "ver": "1.0.25",
  "uuid": "04e9eafc-5436-4634-b9c4-7408175c9b75",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nuniform vec4 cc_time;\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform vec2 u_resolution;\nfloat movingRing(vec2 uv, vec2 center, float r1, float r2) {\n  vec2 d = uv - center;\n  float r = sqrt( dot( d, d ) );\n  d = normalize(d);\n  float theta = -atan(d.y,d.x);\n  theta  = mod(-cc_time.x+0.5*(1.0+theta/3.1415926535897932384626433832795), 1.0);\n  theta -= max(theta - 1.0 + 1e-2, 0.0) * 1e2;\n  return theta*((mix(1.0, 0.0, smoothstep(0.9,1.0, r/r2)))-(mix(1.0, 0.0, smoothstep(0.9,1.0, r/r1))));\n}\nvoid main () {\n  vec2 fragCoord = vec2(v_uv0.x*u_resolution.x, v_uv0.y*u_resolution.y);\n  float ring = movingRing(fragCoord, vec2(u_resolution.x/2.0,u_resolution.y/2.0), 20.0, 30.0);\n  gl_FragColor = vec4(0.1 + 0.9*ring);\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform Loading {\n  vec2 u_resolution;\n};\nfloat movingRing(vec2 uv, vec2 center, float r1, float r2) {\n  vec2 d = uv - center;\n  float r = sqrt( dot( d, d ) );\n  d = normalize(d);\n  float theta = -atan(d.y,d.x);\n  theta  = mod(-cc_time.x+0.5*(1.0+theta/3.1415926535897932384626433832795), 1.0);\n  theta -= max(theta - 1.0 + 1e-2, 0.0) * 1e2;\n  return theta*((mix(1.0, 0.0, smoothstep(0.9,1.0, r/r2)))-(mix(1.0, 0.0, smoothstep(0.9,1.0, r/r1))));\n}\nvoid main () {\n  vec2 fragCoord = vec2(v_uv0.x*u_resolution.x, v_uv0.y*u_resolution.y);\n  float ring = movingRing(fragCoord, vec2(u_resolution.x/2.0,u_resolution.y/2.0), 20.0, 30.0);\n  gl_FragColor = vec4(0.1 + 0.9*ring);\n}"
      }
    }
  ],
  "subMetas": {}
}