// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        u_resolution: { value: [1334, 750], editor: { tooltip: "分辨率" } }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>
  #include <cc-global>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  uniform Loading {
    vec2 u_resolution;
  };
  
  #define SMOOTH(r) (mix(1.0, 0.0, smoothstep(0.9,1.0, r)))
  #define M_PI 3.1415926535897932384626433832795

  float movingRing(vec2 uv, vec2 center, float r1, float r2) {
    vec2 d = uv - center;
    float r = sqrt( dot( d, d ) );
    d = normalize(d);
    float theta = -atan(d.y,d.x);
    theta  = mod(-cc_time.x+0.5*(1.0+theta/M_PI), 1.0);
    //anti aliasing for the ring's head (thanks to TDM !)
    theta -= max(theta - 1.0 + 1e-2, 0.0) * 1e2;
    return theta*(SMOOTH(r/r2)-SMOOTH(r/r1));
  }

  void main () {
    vec2 fragCoord = vec2(v_uv0.x*u_resolution.x, v_uv0.y*u_resolution.y);
    float ring = movingRing(fragCoord, vec2(u_resolution.x/2.0,u_resolution.y/2.0), 20.0, 30.0);
    gl_FragColor = vec4(0.1 + 0.9*ring);
  }
}%
