{
  "ver": "1.0.25",
  "uuid": "24f3811f-0e6b-4150-be04-4003115eff92",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform vec2 textureSize;\nconst vec3 offset = vec3(0.0, 1.3846153846, 3.2307692308);\nconst vec3 weight = vec3(0.2270270270, 0.3162162162, 0.0702702703);\nvec4 frag () {\n  vec2 fragCoord = vec2(textureSize.x*v_uv0.x, textureSize.y*v_uv0.y);\n  vec4 fragColor = vec4(1.0);\n  fragColor = texture2D(texture, fragCoord/textureSize) * weight[0];\n  for (int i=1; i<3; i++) {\n    fragColor += texture2D(texture, (fragCoord+vec2(0.0, offset[i]))/textureSize) * weight[i];\n    fragColor += texture2D(texture, (fragCoord-vec2(0.0, offset[i]))/textureSize) * weight[i];\n  }\n  return fragColor;\n}\nvoid main() { gl_FragColor = frag(); }"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform Linear{\n  vec2 textureSize;\n};\nconst vec3 offset = vec3(0.0, 1.3846153846, 3.2307692308);\nconst vec3 weight = vec3(0.2270270270, 0.3162162162, 0.0702702703);\nvec4 frag () {\n  vec2 fragCoord = vec2(textureSize.x*v_uv0.x, textureSize.y*v_uv0.y);\n  vec4 fragColor = vec4(1.0);\n  fragColor = texture2D(texture, fragCoord/textureSize) * weight[0];\n  for (int i=1; i<3; i++) {\n    fragColor += texture2D(texture, (fragCoord+vec2(0.0, offset[i]))/textureSize) * weight[i];\n    fragColor += texture2D(texture, (fragCoord-vec2(0.0, offset[i]))/textureSize) * weight[i];\n  }\n  return fragColor;\n}\nout vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"
      }
    },
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform vec2 textureSize;\nconst vec3 offset = vec3(0.0, 1.3846153846, 3.2307692308);\nconst vec3 weight = vec3(0.2270270270, 0.3162162162, 0.0702702703);\nvec4 frag () {\n  vec2 fragCoord = vec2(textureSize.x*v_uv0.x, textureSize.y*v_uv0.y);\n  vec4 fragColor = vec4(1.0);\n  fragColor = texture2D(texture, fragCoord/textureSize) * weight[0];\n  for (int i=1; i<3; i++) {\n    fragColor += texture2D(texture, (fragCoord+vec2(offset[i], 0.0))/textureSize) * weight[i];\n    fragColor += texture2D(texture, (fragCoord-vec2(offset[i], 0.0))/textureSize) * weight[i];\n  }\n  return fragColor;\n}\nvoid main() { gl_FragColor = frag(); }"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform Linear{\n  vec2 textureSize;\n};\nconst vec3 offset = vec3(0.0, 1.3846153846, 3.2307692308);\nconst vec3 weight = vec3(0.2270270270, 0.3162162162, 0.0702702703);\nvec4 frag () {\n  vec2 fragCoord = vec2(textureSize.x*v_uv0.x, textureSize.y*v_uv0.y);\n  vec4 fragColor = vec4(1.0);\n  fragColor = texture2D(texture, fragCoord/textureSize) * weight[0];\n  for (int i=1; i<3; i++) {\n    fragColor += texture2D(texture, (fragCoord+vec2(offset[i], 0.0))/textureSize) * weight[i];\n    fragColor += texture2D(texture, (fragCoord-vec2(offset[i], 0.0))/textureSize) * weight[i];\n  }\n  return fragColor;\n}\nout vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"
      }
    }
  ],
  "subMetas": {}
}