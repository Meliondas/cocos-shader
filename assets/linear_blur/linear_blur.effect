// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - name: linear-vert
      vert: vs
      frag: linear-vert-fs:frag
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        textureSize: { value: [1920, 1080], editor: { tooltip: "图片像素" } }
    - name: linear-horiz
      vert: vs
      frag: linear-horiz-fs:frag
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        textureSize: { value: [1920, 1080], editor: { tooltip: "图片像素" } }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%

CCProgram linear-vert-fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  uniform Linear{
    vec2 textureSize;
  };

  const vec3 offset = vec3(0.0, 1.3846153846, 3.2307692308);
  const vec3 weight = vec3(0.2270270270, 0.3162162162, 0.0702702703);

  vec4 frag () {
    vec2 fragCoord = vec2(textureSize.x*v_uv0.x, textureSize.y*v_uv0.y);
    vec4 fragColor = vec4(1.0);
    fragColor = texture2D(texture, fragCoord/textureSize) * weight[0];
	  for (int i=1; i<3; i++) {
		  fragColor += texture2D(texture, (fragCoord+vec2(0.0, offset[i]))/textureSize) * weight[i];
		  fragColor += texture2D(texture, (fragCoord-vec2(0.0, offset[i]))/textureSize) * weight[i];
	  }
    return fragColor;
  }

}%

CCProgram linear-horiz-fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  uniform Linear{
    vec2 textureSize;
  };

  const vec3 offset = vec3(0.0, 1.3846153846, 3.2307692308);
  const vec3 weight = vec3(0.2270270270, 0.3162162162, 0.0702702703);

  vec4 frag () {
    vec2 fragCoord = vec2(textureSize.x*v_uv0.x, textureSize.y*v_uv0.y);
    vec4 fragColor = vec4(1.0);
    fragColor = texture2D(texture, fragCoord/textureSize) * weight[0];
	  for (int i=1; i<3; i++) {
		  fragColor += texture2D(texture, (fragCoord+vec2(offset[i], 0.0))/textureSize) * weight[i];
		  fragColor += texture2D(texture, (fragCoord-vec2(offset[i], 0.0))/textureSize) * weight[i];
	  }
    return fragColor;
  }

}%